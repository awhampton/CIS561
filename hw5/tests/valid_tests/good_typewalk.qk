/**
 * How should one perform type inference
 * for variable x in this program?
 *
 * Iterate to a fixed point (abstract interpretation)?
 * Somehow short-circuit the walk up the type system?
 * Impose some restriction that prevents this problem?
 */

class C1()  extends Obj {
   def foo():  C1 {
       "in C1 foo\n".PRINT();
       return C1();    /* CHANGED */
   }
}

class C2() extends C1 {
   def foo():  C1 {
       "in C2 foo\n".PRINT();
        return C1();    /* Conforms to C1.foo() */
   }
}

class C3() extends C2 {
   def foo(): C2 {
       "in C3 foo\n".PRINT();
        return C2();   /* Conforms to C2.foo() */
   }
}

class C4() extends C3 {
    def foo() : C3 {
        "in C4 foo\n".PRINT();
         return C3();  /* Conforms to C3.foo() */
    }
}

/* Obviously you can extend this pattern indefintely.
 * Now type x below ... what should happen?
 */
x = C4();
i = 0;
while ( i < 10 ) {
   x = x.foo();      /* OK, terminates at C1 */
   i = i + 1;
}
